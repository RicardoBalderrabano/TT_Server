""" Facial Recognizer
This script performs face recognition using the 
face database generated by trainer.py.
The algorithm used is based on ResNet-34 from 
the Deep Residual Learning for Image Recognition paper 
(https://arxiv.org/pdf/1512.03385.pdf) by He et al., 2015.
The network was trained by Davis King, the creator of 
dlib library.
(http://blog.dlib.net/2017/02/high-quality-face-recognition-with-deep.html)
Acording to Davis, the network was trained from scratch 
on a dataset of about 3 million faces and the pretrained 
model is in the public domain. Also, the model has an 
accuracy of 99.38% on the standard Labeled Faces in the 
Wild benchmark, i.e. given two face images, it correctly 
predicts if the images are of the same person 99.38% of 
the time.
Also, this script make use of face_recogniton module,
created by Adam Geitgey.
(https://medium.com/@ageitgey/machine-learning-is-fun-part-4-modern-face-recognition-with-deep-learning-c3cffc121d78)
In his article, he describe the whole process for face 
recognition.
All this information, and more, can be found in this greate
article: https://pyimagesearch.com/2018/06/18/face-recognition-with-opencv-python-and-deep-learning/
by Adrian Rosebrock.
"""

import imutils
import cv2
import face_recognition
import pickle
import os
import numpy as np

# set 1 for macOS, maybe 0 for windows and others

FACEDB = "/home/ubuntu/tests/facedatabase2.dat"  # name of the database

file_dir = os.path.dirname(os.path.realpath(__file__))
FACEDB = os.path.join(file_dir, FACEDB)
FACEDB = os.path.abspath(os.path.realpath(FACEDB))

# confidence 
conf = 0.85
maxImgs = 10

# load the faces database
print("Loading faces database...")
faceData = pickle.loads(open(FACEDB, "rb").read())

#define the face_encodings
#fenco=[-0.16204873,  0.05700064,  0.09044103, -0.0289933,  0.0105991, -0.06313304,  0.02532312, -0.06310672,  0.19280991, -0.06976435,0.27877778, -0.02801619, -0.16462296, -0.08764254,  0.0184108 ,0.10018795, -0.1614228 , -0.07778311, -0.05854391, -0.09281124,0.03796965, -0.06505482,  0.08574302,  0.08136091, -0.13039035,-0.33689976, -0.12185112, -0.17633946,  0.04835968, -0.12887856, 0.03734888, -0.03419122, -0.13015796, -0.01792823, -0.09167993, 0.01533425, -0.01064435, -0.09707557,  0.22708979, -0.05149043, -0.08824956, -0.06267489, -0.01708418,  0.23643188,  0.16007985, -0.01498417,  0.02098352, -0.02181685,  0.11432847, -0.18134783, 0.08841863,  0.07719498,  0.08711237,  0.04825372,  0.09451386, -0.04723743,  0.03988895,  0.07965464, -0.18946315,  0.07275526, 0.04725489,  0.00468429, -0.05424148,  0.00258533,  0.21708301, 0.13386893, -0.10268205, -0.11519437,  0.12464185, -0.11972477, 0.0076764 ,  0.07027947, -0.14508457, -0.18435466, -0.2220473 , 0.10926897,  0.35384247,  0.08600141, -0.14343464, -0.00359992, -0.12797044, -0.04468407,  0.0458146 , -0.00036053, -0.1260138 , -0.01638346, -0.13420668,  0.06053462,  0.13769779,  0.01063394, -0.06730839,  0.21319255, -0.03024589, -0.00797784,  0.03337118, 0.03299601, -0.07148667,  0.05303938, -0.08697553,  0.02529288, 0.14805099, -0.06713539, -0.01860933,  0.03342337, -0.16720949, 0.09504434,  0.00657883, -0.00571885,  0.03074568,  0.04273393,-0.23216605, -0.05640813,  0.16825019, -0.22020227,  0.15109515,0.13512151,  0.07386337,  0.10670583,  0.05183314,  0.06663342,-0.01184203,  0.01027293, -0.10881106,  0.03098165,  0.07032161,0.01464648,  0.03970058,  0.03728874]
fenco=[-0.24387170374393463, 0.03912365436553955, -0.0022386317141354084, -0.05836362764239311, -0.06828901171684265, -0.006483340635895729, -0.014031384140253067, -0.0714292824268341, 0.12940281629562378, -0.0606919601559639, 0.24743758141994476, -0.01912175491452217, -0.26617923378944397, -0.10359374433755875, 0.03987221047282219, 0.15988337993621826, -0.18864716589450836, -0.14756526052951813, -0.07000061869621277, -0.09651042520999908, 0.06507735699415207, -0.05581869184970856, -0.05730511620640755, 0.06585388630628586, -0.11704929918050766, -0.2972131669521332, -0.07403965294361115, -0.14188329875469208, 0.03864963352680206, -0.12018129974603653, 0.049093589186668396, -0.023320235311985016, -0.15339186787605286, -0.059738099575042725, 0.012346684001386166, 0.03427109122276306, -0.08660263568162918, -0.050140075385570526, 0.20744700729846954, -0.08109796792268753, -0.12842191755771637, -0.06945233792066574, 0.07892028987407684, 0.2300969511270523, 0.18907387554645538, 0.058013468980789185, 0.016374681144952774, -0.09393241256475449, 0.1268889456987381, -0.26947343349456787, 0.03314077854156494, 0.16399326920509338, 0.15708911418914795, 0.07780943810939789, 0.07857748866081238, -0.1331605613231659, 0.010439416393637657, 0.20678120851516724, -0.25264808535575867, 0.12352451682090759, 0.013794519007205963, -0.059203293174505234, -0.05246596783399582, -0.05918574333190918, 0.23062923550605774, 0.09735013544559479, -0.1895570605993271, -0.10571715235710144, 0.18024156987667084, -0.12125897407531738, -0.06064252555370331, 0.05247161164879799, -0.12202055752277374, -0.3157414495944977, -0.2798508405685425, 0.07251675426959991, 0.30910202860832214, 0.14600682258605957, -0.1842949390411377, 0.01847143843770027, -0.004729822278022766, -0.06692428141832352, 0.05469771847128868, 0.11241089552640915, -0.0751037746667862, -0.10847881436347961, -0.049614012241363525, 0.0073641566559672356, 0.15587829053401947, 0.002821209840476513, 0.03186166658997536, 0.2215774655342102, -0.004248371347784996, -0.011974956840276718, -0.014543646946549416, 0.10017702728509903, -0.09130523353815079, -0.01962960511445999, -0.10295811295509338, -0.04683526232838631, 0.026820166036486626, -0.03401564806699753, 0.04369218274950981, 0.08424161374568939, -0.08873527497053146, 0.14144645631313324, -0.018085384741425514, 0.020952394232153893, -0.08828489482402802, -0.06649775803089142, -0.07141132652759552, -0.019827112555503845, 0.1216433048248291, -0.21373151242733002, 0.20501382648944855, 0.20175625383853912, 0.03079603612422943, 0.12726493179798126, 0.06840257346630096, 0.023630760610103607, 0.0411517396569252, -0.029385482892394066, -0.207453191280365, -0.004962859209626913, 0.07965117692947388, -0.05239224061369896, 0.02969929575920105, 0.0014376109465956688]
#arr=np.array([-0.16204873,  0.05700064,  0.09044103, -0.0289933,  0.0105991, -0.06313304,  0.02532312, -0.06310672,  0.19280991, -0.06976435,0.27877778, -0.02801619, -0.16462296, -0.08764254,  0.0184108 ,0.10018795, -0.1614228 , -0.07778311, -0.05854391, -0.09281124,0.03796965, -0.06505482,  0.08574302,  0.08136091, -0.13039035,-0.33689976, -0.12185112, -0.17633946,  0.04835968, -0.12887856, 0.03734888, -0.03419122, -0.13015796, -0.01792823, -0.09167993, 0.01533425, -0.01064435, -0.09707557,  0.22708979, -0.05149043, -0.08824956, -0.06267489, -0.01708418,  0.23643188,  0.16007985, -0.01498417,  0.02098352, -0.02181685,  0.11432847, -0.18134783, 0.08841863,  0.07719498,  0.08711237,  0.04825372,  0.09451386, -0.04723743,  0.03988895,  0.07965464, -0.18946315,  0.07275526, 0.04725489,  0.00468429, -0.05424148,  0.00258533,  0.21708301, 0.13386893, -0.10268205, -0.11519437,  0.12464185, -0.11972477, 0.0076764 ,  0.07027947, -0.14508457, -0.18435466, -0.2220473 , 0.10926897,  0.35384247,  0.08600141, -0.14343464, -0.00359992, -0.12797044, -0.04468407,  0.0458146 , -0.00036053, -0.1260138 , -0.01638346, -0.13420668,  0.06053462,  0.13769779,  0.01063394, -0.06730839,  0.21319255, -0.03024589, -0.00797784,  0.03337118, 0.03299601, -0.07148667,  0.05303938, -0.08697553,  0.02529288, 0.14805099, -0.06713539, -0.01860933,  0.03342337, -0.16720949, 0.09504434,  0.00657883, -0.00571885,  0.03074568,  0.04273393,-0.23216605, -0.05640813,  0.16825019, -0.22020227,  0.15109515,0.13512151,  0.07386337,  0.10670583,  0.05183314,  0.06663342,-0.01184203,  0.01027293, -0.10881106,  0.03098165,  0.07032161,0.01464648,  0.03970058,  0.03728874])
arr=np.array([fenco])
encodings=[(arr)]

print(encodings)
userIDs = []
    # get encoding of detected faces
    
    
    # loop over the encodings
for encoding in encodings:
    # attempt to match each face in the input image to our known
    # encodings
    matches = face_recognition.compare_faces(faceData["encodings"],
                                                 encoding, 0.7)
        # matches contains a list of True/False values indicating
        # which known_face_encodings match the face encoding to check
    print(matches)
    id = "Unknown"
        # check to see if we have found a match i.e. we have at least
        # one True value in matches
    if True in matches:
        matchedIdxs = []
            # find the indexes of all matched faces then initialize a
            # dictionary to count the total number of times each face
            # was matched
        for (idx, value) in enumerate(matches):
            if value:
                matchedIdxs.append(idx)
        #print(idx)
        counts = {}
        #print(matchedIdxs)
        # loop over the matched indexes and maintain a count for
        # each recognized face
        for i in matchedIdxs:
            id = faceData["ids"][i]
            counts[id] = counts.get(id, 0) + 1
        # determine the recognized face with the largest number of
        # votes (note: in the event of an unlikely tie Python will
        # select first entry in the dictionary)
        id = max(counts, key=counts.get)
        if(counts[id] < (maxImgs * conf)):
            id = "Unknown"

    # update the list of ids
    userIDs.append(id)

    # loop over the recognized faces
    print(id)
      
cv2.destroyAllWindows()